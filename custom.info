name = Custom
description = Provides a custom functionality.
core = 7.x


; Information added by Drupal.org packaging script on 2015-02-28
version = "7.x-1.6"
core = "7.x"
project = "custom"
datestamp = "1425149060"

Git command:
====================================
CONFIGURE TOOLING
=========================================
Configure user information for all local repositories
------------------------------------------------
1.git config --global user.name "[name]"
    Sets the name you want attached to your commit transactions
2.git config --global user.email "[email address]"
   Sets the email you want attached to your commit transactions
3.git config --global color.ui auto
   Enables helpful colorization of command line output


CREATE REPOSITORIES
==============================
Start a new repository or obtain one from an existing URL
------------------------------------------------

1.git init [project-name]
   Creates a new local repository with the specified name
2.git clone [url]
   Downloads a project and its entire version history


MAKE CHANGES
============================
Review edits and craft a commit transaction
---------------------------------------------
1. git status
     Lists all new or modified files to be committed
2.git add [file]
    Snapshots the file in preparation for versioning
  git add -A
    Add all files in preparation for versioning
3.git reset [file]
   Unstages the file, but preserve its contents
4. git diff
     Shows file differences not yet staged
   git diff --base <filename>
     View the conflicts against the base file.
   git diff <sourcebranch> <targetbranch>
     Preview changes, before merging
5. git diff --staged
     Shows file differences between staging and the last file version
6. git commit -m "[descriptive message]"
     Records file snapshots permanently in version history
   git commit -a
     Commit any files you've added with git add, and also commit any files you've changed since then:

GROUP CHANGES
==========================
Name a series of commits and combine completed efforts
-------------------------------
1.git branch
    Lists all local branches in the current repository
2.git branch [branch-name]
    Creates a new branch
  git checkout -b <branchname>
    Create a new branch and switch to it
3.git checkout [branch-name]
   Switches to the specified branch and updates the working directory
4.git merge [branch]
    Combines the specified branch’s history into the current branch
5.git branch -d [branch-name]
    Deletes the specified branch
6.git fetch origin
    Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it
7.git reset --hard origin/master
    reset your local master branch at it.

SYNCHRONIZE CHANGES
=================================
Register a repository bookmark and exchange version history
--------------------------------------
1.git fetch [bookmark]
    Downloads all history from the repository bookmark
2.git merge [bookmark]/[branch]
    Combines bookmark’s branch into current local branch
3.git push [alias] [branch]
    Uploads all local branch commits to GitHub
4.git pull
    Downloads bookmark history and incorporates changes


REFACTOR FILENAMES
===========================
Relocate and remove versioned files
----------------------------------------------
1.git rm [file]
     Deletes the file from the working directory and stages the deletion
2.git rm --cached [file]
     Removes the file from version control but preserves the file locally
3.git mv [file-original] [file-renamed]
     Changes the file name and prepares it for commit


REVIEW HISTORY
=====================
Browse and inspect the evolution of project files
--------------------------------
1.git log
     Lists version history for the current branch
2.git log --follow [file]
   Lists version history for a file, including renames
3.git diff [first-branch]...[second-branch]
   Shows content differences between two branches
4.git show [commit]
    Outputs metadata and content changes of the specified commit


REDO COMMITS
===================
Erase mistakes and craft replacement history
-----------------------------------------
1.git reset [commit]
    Undoes all commits after [commit] , preserving changes locally
2. git reset --hard [commit]
   Discards all history and changes back to the specified commit


SAVE FRAGMENTS
=======================
Shelve and restore incomplete changes
------------------------------------
1.git stash
    Temporarily stores all modified tracked files
2.git stash save "<any name>"
    Save the stash save data
3.git stash list
    Lists all stashed changesets
4.git stash pop
    Restores the most recently stashed files
5.git stash drop
    Discards the most recently stashed changeset



SUPPRESS TRACKING
===========================
Exclude temporary files and paths
---------------------------------------
1.git ls-files --other --ignored --exclude-standard
     Lists all ignored files in this project


SEARCH
========================
1.git grep "foo()"
   Search the working directory for foo().

